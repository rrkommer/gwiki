package de.micromata.genome.gwiki.jetty;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.log4j.Logger;

import de.micromata.genome.gwiki.auth.PasswordUtils;
import de.micromata.genome.gwiki.spi.storage.LsFileSystemFactoryBean;
import de.micromata.genome.util.bean.FieldMatchers;
import de.micromata.genome.util.bean.PrivateBeanUtils;
import de.micromata.genome.util.collections.SortedProperties;
import de.micromata.genome.util.runtime.LocalSettings;

/**
 * 
 * @author Roger Rene Kommer (r.kommer.extern@micromata.de)
 *
 */
public class GWikiStarterConfig
{
  private static Logger LOG = Logger.getLogger(GWikiStarterConfig.class);
  @LocalSettingsPath(key = "gwiki.jetty.port", defaultValue = "8081")
  private String serverPort;
  @LocalSettingsPath(key = "gwiki.jetty.contextpath", defaultValue = "/")
  private String serverContextPath;

  @LocalSettingsPath(key = "gwiki.public.url", defaultValue = "http://localhost:8081/")
  private String publicUrl;

  @LocalSettingsPath(key = "gwiki.public.email")
  private String publicEmail;

  @LocalSettingsPath(key = "gwiki.sys.user.enabled", defaultValue = "true")
  private String systemUserEnabled;

  @LocalSettingsPath(key = "gwiki.sys.user", defaultValue = "gwikisys")
  private String systemUserName;

  @LocalSettingsPath(key = "gwiki.sys.passwordhash")
  private String systemUserEncPass;

  private String systemUserClearPass;

  @LocalSettingsPath(key = "gwiki.wikifilepath", defaultValue = "./gwiki")
  private String storageFilePath;

  @LocalSettingsPath(key = "db.ds.gwikdb.drivername")
  private String jdbcDriver;

  @LocalSettingsPath(key = "db.ds.gwikdb.url")
  private String jdbcUrl;
  @LocalSettingsPath(key = "db.ds.gwikdb.username")
  private String jdbcUserName;

  @LocalSettingsPath(key = "db.ds.gwikdb.password")
  private String jdbcPassword;

  @LocalSettingsPath(key = "gwiki.enable.webdav", defaultValue = "false")
  private String enableWebDav;

  @LocalSettingsPath(key = "gwiki.filesystem.type", defaultValue = LsFileSystemFactoryBean.LOCAL_FILE_SYSTEM)
  private String fileSystemType;

  public GWikiStarterConfig()
  {

  }

  public void initFromLocalSettings(LocalSettings localSettings)
  {
    List<Field> fields = PrivateBeanUtils.findAllFields(getClass(),
        FieldMatchers.hasAnnotation(LocalSettingsPath.class));
    for (Field field : fields) {
      LocalSettingsPath lsp = field.getAnnotation(LocalSettingsPath.class);
      PrivateBeanUtils.writeField(this, field, localSettings.get(lsp.key(), lsp.defaultValue()));
    }
  }

  public void storeConfig(ValidationContext ctx)
  {
    SortedProperties props = toProperties();
    File propFile = new GWikiInitialSetup().getGwikiProperties();
    try (FileOutputStream fis = new FileOutputStream(propFile)) {
      props.store(fis, "Generated by Gwiki");
    } catch (IOException ex) {
      ctx.error("Cannot write properties " + propFile.getAbsolutePath() + ": " + ex.getMessage());
    }
  }

  public SortedProperties toProperties()
  {
    if (isSystemUserEnabled() == true) {
      if (StringUtils.isNotBlank(systemUserClearPass) == true) {
        systemUserEncPass = PasswordUtils.createSaltedPassword(systemUserClearPass);
      }
    }
    SortedProperties ret = new SortedProperties();
    if (isUseJdbc() == true) {
      ret.put("db.ds.gwikdb.name", "gwikidb");
      ret.put("genomeds", "gwikidb");
      ret.put("jndi.bind.standard.target", "java:/comp/env/genome/jdbc/dsWeb");
      ret.put("jndi.bind.standard.type", "DataSource");
      ret.put("jndi.bind.standard.source", "gwikidb");
    } else {

    }

    List<Field> fields = PrivateBeanUtils.findAllFields(getClass(),
        FieldMatchers.hasAnnotation(LocalSettingsPath.class));
    for (Field field : fields) {
      LocalSettingsPath lsp = field.getAnnotation(LocalSettingsPath.class);
      String val = (String) PrivateBeanUtils.readField(this, field);
      ret.put(lsp.key(), val);
    }

    return ret;
  }

  public boolean validate(ValidationContext ctx)
  {
    validateServerSettings(ctx);
    validateSystemUser(ctx);
    validateStorage(ctx);
    return ctx.hasErrors();
  }

  private void validateSystemUser(ValidationContext ctx)
  {
    if (isSystemUserEnabled() == false) {
      return;
    }
    if (StringUtils.isBlank(systemUserName) == true) {
      ctx.error("systemUserName", "Please provide a name for system user");
    }
    if (StringUtils.isBlank(systemUserClearPass) == true && StringUtils.isBlank(systemUserEncPass) == true) {
      ctx.error("systemUserClearPass", "Please provide password for system user");
    }
  }

  public boolean validateServerSettings(ValidationContext ctx)
  {
    if (StringUtils.isBlank(serverPort) == true) {
      ctx.error("serverPort", "Please provide a server port");
    } else {
      if (NumberUtils.isDigits(serverPort) == false) {
        ctx.error("serverPort", "Please provid numeric port number");
      }
    }
    return ctx.hasErrors();
  }

  public boolean validateStorage(ValidationContext ctx)
  {
    if (isUseJdbc() == true) {
      return validateJdbcStorage(ctx);
    } else {
      return validateLocalFilesystem(ctx);
    }
  }

  private boolean validateLocalFilesystem(ValidationContext ctx)
  {
    if (StringUtils.isBlank(storageFilePath) == true) {
      return ctx.error("storageFilePath", "Please provide directory");
    }
    File dir = new File(storageFilePath);
    if (dir.isFile() == true) {
      ctx.error("storageFilePath", "Please provide directory instead of file");
    }
    return ctx.hasErrors();
  }

  private boolean validateJdbcStorage(ValidationContext ctx)
  {
    if (StringUtils.isBlank(jdbcDriver) == true) {
      ctx.error("jdbcDriver", "Please select jdbcDriver");
    }
    String url = jdbcUrl;
    if (StandaloneDatabases.LOCAL_DERBY.getDriver().equals(jdbcDriver) == true) {
      url = jdbcUrl + ";create=true";
    }
    if (StringUtils.isBlank(url) == true) {
      ctx.error("jdbcUrl", "Please select jdbcUrl");
    }
    if (ctx.hasErrors() == true) {
      return false;
    }

    return checkDbUrl(ctx, jdbcDriver, url, jdbcUserName, jdbcPassword);
  }

  private boolean checkDbUrl(ValidationContext ctx, String driver, String url, String user, String pass)
  {
    try {
      Class.forName(driver);
      try (Connection con = DriverManager.getConnection(url, user, pass)) {
        try (Statement stmt = con.createStatement()) {
          ctx.info("Created DB Connection....");
        }
      }
      return true;
    } catch (ClassNotFoundException e) {
      ctx.error("Cannot find db driver: " + driver);
      LOG.error(e);
      return false;
    } catch (SQLException e) {
      ctx.error("Cannot create connection: " + e.getMessage());
      SQLException ne = e.getNextException();
      if (ne != null && ne != e) {
        ctx.error(ne.getMessage());

      }
      LOG.error(e);
      return false;
    }
  }

  public boolean isSystemUserEnabled()
  {
    return StringUtils.equals(systemUserEnabled, "true");
  }

  public void setSystemUserEnabled(boolean enable)
  {
    systemUserEnabled = Boolean.toString(enable);
  }

  public String getServerPort()
  {
    return serverPort;
  }

  public void setServerPort(String serverPort)
  {
    this.serverPort = serverPort;
  }

  public String getServerContextPath()
  {
    return serverContextPath;
  }

  public void setServerContextPath(String serverContextPath)
  {
    this.serverContextPath = serverContextPath;
  }

  public String getPublicUrl()
  {
    return publicUrl;
  }

  public void setPublicUrl(String publicUrl)
  {
    this.publicUrl = publicUrl;
  }

  public String getPublicEmail()
  {
    return publicEmail;
  }

  public void setPublicEmail(String publicEmail)
  {
    this.publicEmail = publicEmail;
  }

  public String getSystemUserName()
  {
    return systemUserName;
  }

  public void setSystemUserName(String systemUserName)
  {
    this.systemUserName = systemUserName;
  }

  public String getSystemUserEncPass()
  {
    return systemUserEncPass;
  }

  public void setSystemUserEncPass(String systemUserEncPass)
  {
    this.systemUserEncPass = systemUserEncPass;
  }

  public String getStorageFilePath()
  {
    return storageFilePath;
  }

  public void setStorageFilePath(String storageFilePath)
  {
    this.storageFilePath = storageFilePath;
  }

  public String getSystemUserClearPass()
  {
    return systemUserClearPass;
  }

  public void setSystemUserClearPass(String systemUserClearPass)
  {
    this.systemUserClearPass = systemUserClearPass;
  }

  public String getJdbcDriver()
  {
    return jdbcDriver;
  }

  public void setJdbcDriver(String jdbcDriver)
  {
    this.jdbcDriver = jdbcDriver;
  }

  public String getJdbcUrl()
  {
    return jdbcUrl;
  }

  public void setJdbcUrl(String jdbcUrl)
  {
    this.jdbcUrl = jdbcUrl;
  }

  public String getJdbcUserName()
  {
    return jdbcUserName;
  }

  public void setJdbcUserName(String jdbcUserName)
  {
    this.jdbcUserName = jdbcUserName;
  }

  public String getJdbcPassword()
  {
    return jdbcPassword;
  }

  public void setJdbcPassword(String jdbcPassword)
  {
    this.jdbcPassword = jdbcPassword;
  }

  public boolean isUseJdbc()
  {
    return LsFileSystemFactoryBean.JPA_FILE_SYSTEM.equals(fileSystemType);
  }

  public void setUseJdbc(boolean useJdbc)
  {
    fileSystemType = useJdbc ? LsFileSystemFactoryBean.JPA_FILE_SYSTEM : LsFileSystemFactoryBean.LOCAL_FILE_SYSTEM;
  }

}
