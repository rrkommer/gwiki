{pageintro}
For more modulare concept GWiki Plugin package format will be introduced.
{pageintro}

{note}
GWiki Plugins are available since 0.9.0. See [gwikidocs/howtos/en/Develop_a_GWiki_Plugin].
{note}

h2. Current situation
GWiki has already an open architecture. Nearly all aspects can be extended.

But the current solution has following disadvantage:
- Java classes has to put into normal class path.
- Configuration, templates etc. has to be spread in the virtual file system. It is possible to use mounted file systems to seperate files on different location, but to many mounts may slow down the file system performance.
- Some configuration has to be done in global GWiki configuration: Register Macros, Filters, Elements and so on.
- No Meta info for a plugin is available

h2. Goal description
A plugin is a directory or ZIP file - similar to a WAR or JAR file - containing all files needed for a GWiki Plugin.

Developing a GWiki Plugin should be easy. No redeployment should be necessary, but normal IDE mechanism and container hot code replacment mechanism should work.

h2. Solution Concept
h3. Standard layout

- /gwikiplugin.xml: Descriptor
- /src/main/java: Source java classes, not included in plugin.
- /classes: Java classes
- /classes/static: Static class path for static resources.
- /lib: Jars
- /content/gwiki: files are mounted into gwiki virtual file system.

h3. Installed Plugins
Installed plugins are normal zip files in the GWiki file items.
All Zips in the /admin/plugin directory will be regarded as plugin.

h3. Remote plugin repository
The Remote plugin repository will be implemented as two GWiki plugins.

h3. Server plugin repository
Provide functionallity to store, provide plugin informations, include the plugins itself.
REST interface for plugin descriptions.

h3. Client plugin repository
Connects to a given URL with the available plugins.
Provide pages to display information and download plugin and install it.


h3. Open Issues
- Mounting into virtual file system: Too many mount points lower performance. Has to be regarded.
- ClassLoader does not handle classes with same name. Class file should be unique.
