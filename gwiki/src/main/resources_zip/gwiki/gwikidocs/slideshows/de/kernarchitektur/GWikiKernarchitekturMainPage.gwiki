{slideshow:incremental=true}
{slidehandout}
{pageintro}
Vorstellung der Kernarchitektur von GWiki.

{pageintro}
{slidehandout}
{slideheader}
{div}!inc/gwiki/img/gui/gwikiLogo.png!{div}{div}!inc/gwiki/img/gui/micromataLogo.png!{div}h1. GWiki Features
{slideheader}
{slidefooter}
{div}Roger Kommer (c) 2013{div}
{slidefooter}

{slide:title=GWiki Kernarchitektur}
\\
\\
Vorstellung der Kernarchitektur von GWiki.
\\
\\
*Alles ist Wiki*
{slide}
{slide:title=Was ist GWiki}
Multipurpose Wiki.
- Library
-- Render/Parse Wiki
- Framework Library
-- Use content in Java Web App.
- Application
- Application Framework

{slide}
{slide:title=Die Suche nach einem Wiki}
Kundenprojekt will eingebettete Knowledge Base / Hilfesystem.
- Java
- Quellcode
- Integrierbar in Java Webanwendungen
- Einfaches Deployment / Geringe Infrastrukturanforderungen
- Clusterfähig
- *Verträgliche Lizenz*
{slide}
{slide:title=Sackgassen}
- Wikimatrix listet 142 Wikis
- 3 davon grob den Rahmen (Kein (L)GPL!)
- JSP Wiki scheint am ausgereifesten
- 1 Woche Evaluation/Coding
- Aufgegeben
- Das geht besser!
{slide}
{slide:title=GWiki Motivation}
- Einsatz im Java (EE)-Feld.
- Clusterfähig
- Skalierbar
- Integrierbar
- Adaptierbar
- Erweiterbar
- = "Die Gute Architektur"
- Passende OpenSource Lizenz
{slide}

{slide:title=Einsatzszenarien}
- Library HTML <=> Wiki
- Desktop Wiki für persönlichen Einsatz.
- Vollwertiges Wiki-basiertes CMS
- Einbettbar in Javaanwendungen
- CMS-Zusätz für tradionelle Java basierte Webanwendungen
- Dynamischer Content, Wiki/Rapid Development.
{slide}

{slide:title=Rahmenbedingungen}
- Java 1.5 oder höher
- Servlet Container (Jetty, Tomcat, BEA, JBoss, etc.)
- Bis ca. 10.000 Seiten
- Rendern komplexer Wikiseiten < 10 ms (ca. 4 ms)
{slide}

{slide:title=Meine Wiki Vorgeschichte}
- ca. 1998: Perl Anwendung für das Generieren von HTML-Seiten mit Wiki (acdk.sourceforge.net mit > 10.000 Seiten).
- User von Confluence/Jira bei Micromata
- Abstimmung mit Kunde bzgl. Oberflächentexte nervt.
- Kunde DHL bestellt integriertes Wiki in der DHL Online Frankierung.
{slide}
{slide:title=Architekturprinzipien}
- Wenige Entwurfsmuster
- *Alles ist Wiki*
- Wiki ist nicht hart kodiert
- gesteuert über Meta-Daten
- Wiki-Element ist eine Datei im virtuellen Dateisystem
- Abstraktion der Serviceschnittstellen
- Interceptoren für die wichtigen Prozesse 
- Das Wiki ist im Wiki selbst implementiert.
{slide}

{slide:title=Sonstige Prinzipien}
- Bekannte Technologien
- Relativ wenige Abhängigkeiten (Libraries, Frameworks, Toolstack)
- Soweit möglich, stateless zum Browser, auch bei Änderungen
- Performant und skalierbar.
- 98% Lesen, 2% Schreiben.
{slide}

{slide:title=Was sind GWiki Services}
- Java Interfaces
- Setzen durch Spring Bean XML-Datei
{slide}
{slide:title=GWiki Services}
 {div:style=font-size:0.9em;}
- Storage
- Suche
- Authorization
- Internationalisierung
- Scheduling
- Email
- Logging
- Session
- Cache
{div}
{slide}

{slide:title=Persistenz}
Wahl der Persistenz

- Universell, Flexibel
- FileSystem

- Standard Dateisystem.
- RAM/ZIP
- Datenbank.

- FileSystem Event für Clustering
{slide}
{slide:title=FileSystem Hierarchie}
!gwikidocs/slideshows/de/kernarchitektur/FileSystemHierarchie.png!
{slide}
{slide:title=Mounted Filesystem}
Virtuelle Dateisysteme können kombiniert werden.
- ROM/RAM: ROM als ZIP im jar enthält Basisseiten. Copy-On-Write in RAM (z.B. DB)
- Multimount

- Beispiele:
-- directory/-: Lese/Schreibe alle Elemente unter directory oder
-- TextIndex.txt: Lese/Schreibe alle Elemente die mit TextIndex.txt enden in ein spezielles Dateisystem.
{slide}
{slide:title=Mounted Filesystem Beispiel}
{div:style=font-size:0.8em}
{code}
<bean class="de.micromata.genome.gwiki.spi.storage.GWikiFileStorage">
	<constructor-arg>
		<bean class="de.micromata.genome.gdbfs.MultiMountCombinedFileSystem">
			<constructor-arg>
				<map>
					<entry
						key="-*,+tmp/*,+arch/*,+*/arch/*,+*TextExtract.txt,+*TextIndex.txt,+admin/GlobalTextIndexSettings.properties">
						<bean class="de.micromata.genome.gdbfs.StdFileSystem">
							<constructor-arg>
								<value>${gwiki.dev.path}/src/main/external_resources/gwiki_tmp</value>
							</constructor-arg>
						</bean>

					</entry>
					<entry key="+admin/*,-admin/user/*,+edit/*,+gwikidocs/*,+inc/*">
						<bean class="de.micromata.genome.gdbfs.StdFileSystem">
							<constructor-arg>
								<value>${gwiki.dev.path}/src/main/resources_zip/gwiki</value>
							</constructor-arg>
						</bean>
					</entry>
					<entry key="+pub/*">
						<bean class="de.micromata.genome.gdbfs.StdFileSystem">
							<constructor-arg>
								<value>${gwiki.dev.path}/src/main/external_resources/gwiki_pub</value>
							</constructor-arg>
						</bean>
					</entry>
					<entry key="*">
						<bean class="de.micromata.genome.gdbfs.StdFileSystem">
							<constructor-arg>
								<value>${gwiki.dev.path}/src/main/external_resources/gwiki_dev</value>
							</constructor-arg>
						</bean>
					</entry>
				</map>
			</constructor-arg>
		</bean>
{code}
{div}
{slide}
{slide:title=Suchengine}
{div:style=font-size:0.8em;}
- Volltextsuche
- Clusterfähig
- Datenbank oder Dateisystem
{div}
- => Standardlösung Lucene passt nicht (2009).
{div:style=font-size:0.8em;}
- Wiki, HTML (mit Gewichtung)
- PDF, Word, Excel, PPT, Texte
{div}
- Annahmen:
{div:style=font-size:0.8em;}
- Einfacher Textbasierter Index passt in RAM. (=> ca. 1.000 Seiten ~ 500 kb.)
- Seltene Updates.
{div}
{slide}


{slide:title=Authorization}
- GWiki liefert eigene Implemtierung mit User-Management
- Einfaches Interface
- Rechte sind einfache Strings
- Rechte werden in der Seitenhierarchie vererbt
- Kann gegen eigene Implementierung ersetzt werden
- Kann mit eigener Implementierung kombiniert werden
{slide}

{slide:title=Interne Filter}
Filter können über die WikiConfig online eingetragen werden.
Um in die interne Prozesse eingreifen zu können, werden Interceptoren, bzw. Filter unterstützt:
- Pesistenz (Laden, Schreiben, Löschen)
- Ausführen auf Elementebene
- Parsen des Wikiquelltextes
- Ausführen auf Wikiebene
{slide}

{slide:title=Filter Hierarchie}
{center}!gwikidocs/slideshows/de/kernarchitektur/WikiFilterHierarchie.png|width=30%!{center}
{slide}

{slide:title=GWiki Elemente}
*Alles ist Wiki*

Alle Elemente in GWiki sind über ein Element des Wiki, sprich einer (virtuellen) Datei abgebildet:
{div:style=font-size:0.8em}
- Konfigurationen, Metatemplates
- Seiten, Attachments, Kommentare, Archivierte Versionen
- Interne Seiten, I18N-Dateien
- Templates, Skins, Macros, *Code*
- User
- Suchindice, Temporäre Daten
{div}
- und haben dadurch einen kanonischen Namen.
{slide}
{slide:title=Settings Artefakt}
- Ein Element besteht aus mehren Artefakte
- Jedes Element hat das Artefakt Settings.properties
-- ElementTyp (über Metatemplate)
-- Versionsinfos
-- Parent verlinkung
-- Rechte
-- Elementtyp 
-- *Metatemplate*
-- und eigen definierte Schlüssel.
{slide}
{slide:title=Beispiel Settings}
#
#Wed Dec 12 18:23:02 CET 2012
MODIFIEDBY=rkommer
CREATEDBY=gwikisu
CONTENTYPE=text/html
WIKIMETATEMPLATE=edit/EditPageMetaTemplate
TITLE=I{gwiki.edit.EditPage.title}
TYPE=gwiki
HELP_PAGE=gwikidocs/help/en/EditPage
MODIFIEDAT=20121212172302390
CREATEDAT=20091206140500000
AUTH_EDIT=AUTH_EDIT
NOINDEX=true
VERSION=1
{slide}
{slide:title=GWikiElement Typen}
- Element Typen sind wie Servlets. 
- Ein Elementtyp z.B. analog zu FileServlet
- wobei Files und ggf.Steuerinformationen (.access) Inhalt definieren.
{slide}
{slide:title=GWikiElement Hierarchie}
{center}!gwikidocs/slideshows/de/kernarchitektur/GWikiElementHierarchie.png|width=70%!{center}
{slide}

{slide:title=Metatemplate}
- Metatemplate ist selbst ein Wiki-Element
- XML/Bean
- allgemeine Eigenschaften (Rechte, Sichtbarkeit, etc.)
- Aus welchen Artefakte - zusätzlich zu den Settings - das Element besteht.
- Alle Metatemplate im Verzeichnis {{admin/templates}} können über Menü erzeugt werden.
{slide}

{slide:title=Metatemplate WikiProg}
{div:style=font-size:0.8em}
{code}
<bean id="config" class="de.micromata.genome.gwiki.model.config.GWikiMetaTemplate"
	singleton="false">
	<property name="elementType" value="gwiki" />
	<property name="requiredEditRight" value="GWIKI_DEVELOPER" />
	<!--  1 Week -->
	<property name="elementLifeTime" value="604800000" />
	<property name="parts">
		<map>
			<entry key="Controler">
				<bean class="de.micromata.genome.gwiki.page.impl.GWikiActionBeanArtefakt">
					<property name="forward">
						<bean
							class="de.micromata.genome.gwiki.page.impl.GWikiJspTemplateArtefakt">
							<property name="parts">
								<map>
									<entry key="MainPage">
										<bean
											class="de.micromata.genome.gwiki.page.impl.GWikiWikiPageArtefakt" />
									</entry>
								</map>
							</property>
						</bean>
					</property>
				</bean>
			</entry>
		</map>
	</property>
</bean>
{code}
{div}
- -> Beispiel WikiControl
{slide}

{slide:title=GWikiArtefakt}
- Eine Javaklasse
- Kann sich rendern
- Kann sich von und zu Text, HTML oder binären Daten transformieren.
- Kooperiert mit anderen Artefakten im Element.
- Ist eine Factory für einen GWikiEditorArtefakt, der eine GUI für das Editieren zur Verfügung stellt.
{slide}

{slide:title=GWikiArtefakt Hierarchie}
{center}!gwikidocs/slideshows/de/kernarchitektur/GWikiArtefaktHierarchie.png|width=30%!{center}
{slide}

{slide:title=GWikiEditorArtefakt Hierarchie}
{center}!gwikidocs/slideshows/de/kernarchitektur/GWikiEditorArtefaktHierarchie.png|width=50%!{center}
{slide}

{slide:title=GSPT Artefakte}
- Groovy Server Pages
- Unterstützt alle JSP-Features:
-- Scriptlets
-- Taglibaries
- Keine "Sorge" um unterschiedliche Containerimplementierung
- Kein Dateisystem notwendig (wie bei Jasper)
- Performant
{slide}

{slide:title=GSPT Editor}
{center}!gwikidocs/slideshows/de/kernarchitektur/GSPTEditor.png|width=80%!{center}
{slide}

{slide:title=Controler Artefakte}
- Stripes/Struts ähnliches Framework (ActionBeans)
- Java Klasse
- Groovy Class
{slide}

{slide:title=Groovy ActionBean Editor}
{center}!gwikidocs/slideshows/de/kernarchitektur/GroovyActionBeanEditor.png|width=70%!{center}
{slide}

{slide:title=Gwiki Wiki}
\\
\\
\\
\\
\\
\\
{center}Architekur Wiki der Wiki-Engine{center}
{slide}

{slide:title=Wiki Verlinkung}
- Klassisches Wiki mit CamelCase. 
- Hierarchisch aufgebaute Seiten.
- Rechtemodell einfacher mit Hierarchischen Modell.
- Parent/Childs/Silblings
- Spaces, Sprache werden rekursiv über Parents aufgelöst.
{slide}

{slide:title=Wiki Parser}
- Erster Wurf registrieren von Regular Expressions
-- Bei großer Wikiseite (ca. 10 DIN-A 4) 4 Sekunden für Parsen.
-- Syntax-Probleme bei einigen Confluence Syntaxelementen
- Zweiter Wurf, hart kodierter Top-Down-Parser
-- 4 ms fürs parsen einer großen Wikiseite.
Kern relativ klein, Rest sind Macros.
{slide}

{slide:title=Wiki DOM 1}
{center}!gwikidocs/slideshows/de/kernarchitektur/FragmentHierarchie.png|width=70%!{center}
{slide}

{slide:title=Wiki DOM 2}
Parser erzeugt eine Art DOM (WikiFragment)
- Rechte
- Dynamisch
- Render Modes 
- Rich Text Editor
{slide}

{slide:title=Macros}
Einfach zu erstellen
- Java Klasse (Bean)
- JSP/GSPT-Seite
{div:style=font-size: 0.7em}
Macros mit
- mit/ohne Body
- mit Wiki-Text als Body, oder vom Macro selbst ausgewertet.
- XHTML-Position (p oder nicht p aussenrum/in childs)
- RTE-Fähig
- Compiletime Macro manipuliert DOM oder führt neue Macros ein (usemacro, jsptaglib)
- Runtime Macro
{div}
{slide}
{slide:title=Macro Hierarchie (0.6)}

{center}!gwikidocs/slideshows/de/kernarchitektur/MacroHierarchie.png|width=18%!{center}
{slide}
{slide:title=Elements to Fragments}
{center}!gwikidocs/slideshows/de/kernarchitektur/ElementsToFragmentOverview.png|width=40%!{center}
{slide}
{slide:title=Entwicklung}
- 2009 Q3 - 2010 Q1
- Ca. 3 MM für Kern und 3 MM für Doku, Style, etc.
- Nervfaktoren: 
-- Javascript
-- CSS
-- Rich Text Editor
- Spassfaktor:
-- Konzept "Alles ist Wiki" geht auf.
{slide}
{slide:title=Open Source}
GWiki ist unter http://labs.micromata.de/gwiki unter der Apache 2.0 Lizenz veröffentlicht.

- Einfach zu startende Desktop Variante
-- Downloaden, Starten, ein paar Fragen beantworten, fertig.
- Libraries und sourcen über Maven repository.

{slide}
{slide:title=Fin}
\\
\\
\\
{center}Vielen Dank für die Aufmerksamkeit.{center}
{slide}
{slideshow}